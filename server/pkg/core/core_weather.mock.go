// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nicoalimin/weathering/server/pkg/core (interfaces: CoreWeather)

// Package core is a generated GoMock package.
package core

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCoreWeather is a mock of CoreWeather interface
type MockCoreWeather struct {
	ctrl     *gomock.Controller
	recorder *MockCoreWeatherMockRecorder
}

// MockCoreWeatherMockRecorder is the mock recorder for MockCoreWeather
type MockCoreWeatherMockRecorder struct {
	mock *MockCoreWeather
}

// NewMockCoreWeather creates a new mock instance
func NewMockCoreWeather(ctrl *gomock.Controller) *MockCoreWeather {
	mock := &MockCoreWeather{ctrl: ctrl}
	mock.recorder = &MockCoreWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoreWeather) EXPECT() *MockCoreWeatherMockRecorder {
	return m.recorder
}

// GetWeatherByCity mocks base method
func (m *MockCoreWeather) GetWeatherByCity(arg0 string) (*Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherByCity", arg0)
	ret0, _ := ret[0].(*Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherByCity indicates an expected call of GetWeatherByCity
func (mr *MockCoreWeatherMockRecorder) GetWeatherByCity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherByCity", reflect.TypeOf((*MockCoreWeather)(nil).GetWeatherByCity), arg0)
}
